<<: !include power_meter_common.yaml

# ----------------------------------------------------------------------------------------------------
# Sensor updated every second to give feedback in Home Assistant
# ----------------------------------------------------------------------------------------------------

sensor:
  # Sensor showing the actual power consumption
  - id: real_power
    platform: template
    name: "Real Power"
    device_class: "power"
    unit_of_measurement: "W"
    update_interval: 1s

# ----------------------------------------------------------------------------------------------------
# Use http request component
# ----------------------------------------------------------------------------------------------------

http_request:
  id: http_request_data
  useragent: esphome/device
  timeout: 10s
  verify_ssl: False

# ----------------------------------------------------------------------------------------------------
# Define scripts for power collection
# ----------------------------------------------------------------------------------------------------

script:
  # Shelly script gather power reports from Energy Meter and update globals (real_power)
  # Information are provided as json. Power exchanged with the grid is names "power"
  # When this value is positive, energy is taken from the grid.
  # When this value is negative, energy is pushed to the grid.
  - id: power_meter_source
    mode: single
    then:
      - if:
          condition:
            lambda: 'return network::is_connected();'
          then:
            - http_request.get:
                url: http://${power_meter_ip_address}/emeter/${emeter_index}
                headers:
                  Content-Type: application/json
                  Authorization: ${power_meter_auth_header}
                capture_response: true
                max_response_buffer_size: 4096
                on_response:
                  then:
                    - logger.log:
                        format: 'Response status: %d, Duration: %u ms'
                        args:
                          - response->status_code
                          - response->duration_ms
                    - lambda: |-
                        if (response->status_code != 200) {
                            ESP_LOGW("custom", "HTTP Request failed with status: %d", response->status_code);
                            id(real_power).publish_state(NAN);
                        } else {

                          bool parse_success = json::parse_json(body, [](JsonObject root) -> bool {
                              if (!root.containsKey("power")) {
                                  ESP_LOGW("custom", "Invalid JSON structure");
                                  return false;
                              }
                              id(real_power).publish_state(root["power"].as< float >());
                              return true;
                          });

                          if (!parse_success) {
                              ESP_LOGW("custom", "JSON Parsing failed");
                              id(real_power).publish_state(NAN);
                          }
                        }

time:
  - platform: sntp
    on_time:
      - seconds: /1
        then:
          - if:
              condition:
                - lambda: return id(power_meter_activated) != 0;
              then:
                - script.execute: power_meter_source

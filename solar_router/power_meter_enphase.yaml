<<: !include power_meter_common.yaml

esphome:
  min_version: 2024.11.1
  on_boot:
    then:
      - script.execute: get_enphase_token

# ----------------------------------------------------------------------------------------------------
# Token management
# ----------------------------------------------------------------------------------------------------
substitutions:
  enphase_user: "votre_email"
  enphase_password: "votre_mot_de_passe"

globals:
  - id: enphase_token
    type: std::string
    initial_value: ""


# ----------------------------------------------------------------------------------------------------
# Use http request component
# ----------------------------------------------------------------------------------------------------

http_request:
  id: http_request_data
  useragent: esphome/device
  timeout: 10s
  verify_ssl: False


script:
  # --------------------------------------------------------------------------------------------------
  # Define scripts to get authentication tocken 
  # --------------------------------------------------------------------------------------------------
  - id: get_enphase_token
    mode: single
    then:
      - if:
          condition:
            lambda: 'return network::is_connected();'
          then:
            - http_request.post:
                url: "https://api.enphaseenergy.com/oauth/token"
                headers:
                  Content-Type: application/x-www-form-urlencoded
                body: "grant_type=password&username=${enphase_username}&password=${enphase_password}"
                on_response:
                  then:
                    - lambda: |-
                        if (response->status_code != 200) {
                            ESP_LOGW("custom", "HTTP Request failed with status: %d", response->status_code);
                            id(enphase_token) = NAN;
                        } else {
                          bool parse_success = json::parse_json(body, [](JsonObject root) -> bool {
                              if (!root.containsKey("access_token")) {
                                  id(enphase_token)=root["access_token"].as<std::string>();
                                  return true;
                              }
                              ESP_LOGW("custom", "Invalid JSON structure");
                              return false;
                          });
                          if (!parse_success) {
                              ESP_LOGW("custom", "JSON Parsing failed");
                              id(enphase_token) = NAN;
                          }
                        }


# Texte pour afficher les 10 premiers caractÃ¨res du token 
text_sensor:
  - platform: template
    name: "Enphase Token Preview"
    lambda: |-
      if (id(enphase_token).length() > 10) {
        return id(enphase_token).substr(0, 10) + "...";
      } else {
        return std::string("Pas de token");
      }
    update_interval: 60s


  # --------------------------------------------------------------------------------------------------
  # Define scripts for power collection
  # --------------------------------------------------------------------------------------------------
#   - id: power_meter_source
#     mode: single
#     then:
#       - if:
#           condition:
#             lambda: 'return network::is_connected();'
#           then:
#             - http_request.get:
#                 url: http://${power_meter_ip_address}/solar_api/v1/GetMeterRealtimeData.cgi
#                 headers:
#                   Content-Type: application/json
#                 capture_response: true
#                 max_response_buffer_size: 4096
#                 on_response:
#                   then:
#                     - lambda: |-
#                         if (response->status_code != 200) {
#                             ESP_LOGW("custom", "HTTP Request failed with status: %d", response->status_code);
#                             id(real_power).publish_state(NAN);
#                         } else {
#                           bool parse_success = json::parse_json(body, [](JsonObject root) -> bool {
#                               if (!root.containsKey("Body")) {
#                                   ESP_LOGW("custom", "Invalid JSON structure");
#                                   return false;
#                               }
#                               id(real_power).publish_state(root["Body"]["Data"]["0"]["PowerReal_P_Sum"].as<float>());
#                               return true;
#                           });

#                           if (!parse_success) {
#                               ESP_LOGW("custom", "JSON Parsing failed");
#                               id(real_power).publish_state(NAN);
#                           }
#                         }
#                 on_error:
#                   then:
#                     - lambda: |-
#                         ESP_LOGW("custom", "HTTP Request failed or timeout occurred");
#                         id(real_power).publish_state(NAN);
#             - http_request.get:
#                 url: http://${power_meter_ip_address}/solar_api/v1/GetPowerFlowRealtimeData.fcgi
#                 headers:
#                   Content-Type: application/json
#                 capture_response: true
#                 max_response_buffer_size: 4096
#                 on_response:
#                   then:
#                     - lambda: |-
#                         if (response->status_code != 200) {
#                             ESP_LOGW("custom", "HTTP Request failed with status: %d", response->status_code);
#                             id(consumption).publish_state(NAN);
#                         } else {
#                           bool parse_success = json::parse_json(body, [](JsonObject root) -> bool {
#                               if (!root.containsKey("Body")) {
#                                   ESP_LOGW("custom", "Invalid JSON structure");
#                                   id(consumption).publish_state(NAN);
#                                   return false;
#                               }
#                               id(consumption).publish_state(
#                                   root["Body"]["Data"]["Site"]["P_Grid"].as<float>() 
#                                 + root["Body"]["Data"]["Site"]["P_PV"].as<float>()
#                               );
#                               return true;
#                           });

#                           if (!parse_success) {
#                               ESP_LOGW("custom", "JSON Parsing failed");
#                               id(consumption).publish_state(NAN);
#                           }
#                         }
#                 on_error:
#                   then:
#                     - lambda: |-
#                         ESP_LOGW("custom", "HTTP Request failed or timeout occurred");
#                         id(consumption).publish_state(NAN);
# time:
#   - platform: sntp
#     on_time:
#       - seconds: /1
#         then:
#           - if:
#               condition:
#                 - lambda: return id(power_meter_activated) != 0;
#               then:
#                 - script.execute: power_meter_source


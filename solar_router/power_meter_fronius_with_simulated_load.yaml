<<: !include power_meter_common.yaml

# ----------------------------------------------------------------------------------------------------
# Sensor updated every second to give feedback in Home Assistant
# ----------------------------------------------------------------------------------------------------

sensor:
  # Sensor showing the actual power consumption
  - id: real_power
    platform: template
    name: "Real Power"
    device_class: "power"
    unit_of_measurement: "W"
    update_interval: 1s

# ----------------------------------------------------------------------------------------------------
# User interaction
# ----------------------------------------------------------------------------------------------------

number:
  # Simulated load used for developement
  # It should be commented out for production
  - platform: template
    name: "Simulated Load"
    id: simulated_load_power
    optimistic: True
    restore_value: True
    mode: box
    min_value: -99999
    max_value: 99999
    initial_value: 0
    unit_of_measurement: "W"
    step: 1

# ----------------------------------------------------------------------------------------------------
# Use http request component
# ----------------------------------------------------------------------------------------------------

http_request:
  id: http_request_data
  useragent: esphome/device
  timeout: 10s
  verify_ssl: False

# ----------------------------------------------------------------------------------------------------
# Define scripts for power collection
# ----------------------------------------------------------------------------------------------------

script:
  # Fronius script gather power reports from inverter and update globals (real_power)
  # Information are provided as json. Power exchanged with the grid is names PowerReal_P_Sum
  # When this value is positive, energy is taken from the grid.
  # When this value is negative, energy is pushed to the grid.
  - id: power_meter_source
    mode: single
    then:
      - if:
          condition:
            lambda: 'return network::is_connected();'
          then:
            - http_request.get:
                url: http://${power_meter_ip_address}/solar_api/v1/GetMeterRealtimeData.cgi
                headers:
                  Content-Type: application/json
                capture_response: true
                max_response_buffer_size: 4096
                on_response:
                  then:
                    - lambda: |-
                        if (response->status_code != 200) {
                            ESP_LOGW("custom", "HTTP Request failed with status: %d", response->status_code);
                            id(real_power).publish_state(NAN);
                        } else {
                          bool parse_success = json::parse_json(response->body, [](JsonObject root) -> bool {
                              if (!root.containsKey("Body") || !root["Body"]["Data"]["0"].containsKey("PowerReal_P_Sum")) {
                                  ESP_LOGW("custom", "Invalid JSON structure");
                                  return false;
                              }
                              id(real_power).publish_state(
                                  data["Body"]["Data"]["0"]["PowerReal_P_Sum"].as< float >()
                                  + id(simulated_load_power).state*id(triac_opening).state / 100 // Simulated load used for developement. It should be commented out for production.
                              );
                              return true;
                          });

                          if (!parse_success) {
                              ESP_LOGW("custom", "JSON Parsing failed");
                              id(real_power).publish_state(NAN);
                          }
                        }

time:
  - platform: sntp
    on_time:
      - seconds: /1
        then:
          - if:
              condition:
                - lambda: return id(power_meter_activated) != 0;
              then:
                - script.execute: power_meter_source
